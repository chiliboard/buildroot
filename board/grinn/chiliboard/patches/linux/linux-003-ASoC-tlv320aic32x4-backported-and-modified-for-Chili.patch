From 53c475710e570fd68ddb2169cc5981d91054548c Mon Sep 17 00:00:00 2001
From: Wojciech Nizinski <w.nizinski@grinn-global.com>
Date: Tue, 5 Apr 2016 11:27:14 +0200
Subject: [PATCH 1/2] ASoC: tlv320aic32x4: backported and modified for
 Chiliboard

---
 include/sound/tlv320aic32x4.h    |   1 +
 sound/soc/codecs/Kconfig         |   4 +-
 sound/soc/codecs/tlv320aic32x4.c | 356 ++++++++++++++++++++++++++++++---------
 sound/soc/codecs/tlv320aic32x4.h |   6 +
 4 files changed, 283 insertions(+), 84 deletions(-)

diff --git a/include/sound/tlv320aic32x4.h b/include/sound/tlv320aic32x4.h
index 24e5d99..41880d2 100644
--- a/include/sound/tlv320aic32x4.h
+++ b/include/sound/tlv320aic32x4.h
@@ -21,6 +21,7 @@
 
 #define AIC32X4_MICPGA_ROUTE_LMIC_IN2R_10K	0x00000001
 #define AIC32X4_MICPGA_ROUTE_RMIC_IN1L_10K	0x00000002
+#define AIC32X4_MICPGA_ROUTE_NEG_CM1_10K	0x00000004
 
 struct aic32x4_pdata {
 	u32 power_cfg;
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 537084c..31ffa20 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -382,7 +382,9 @@ config SND_SOC_TLV320AIC31XX
 	select REGMAP_I2C
 
 config SND_SOC_TLV320AIC32X4
-	tristate
+	tristate "Texas Instruments TLV320AIC32x4 CODECs"
+	depends on I2C
+	select REGMAP_I2C
 
 config SND_SOC_TLV320AIC3X
 	tristate "Texas Instruments TLV320AIC3x CODECs"
diff --git a/sound/soc/codecs/tlv320aic32x4.c b/sound/soc/codecs/tlv320aic32x4.c
index 688151b..ac817af 100644
--- a/sound/soc/codecs/tlv320aic32x4.c
+++ b/sound/soc/codecs/tlv320aic32x4.c
@@ -29,9 +29,12 @@
 #include <linux/delay.h>
 #include <linux/pm.h>
 #include <linux/gpio.h>
+#include <linux/of_gpio.h>
 #include <linux/i2c.h>
 #include <linux/cdev.h>
 #include <linux/slab.h>
+#include <linux/clk.h>
+#include <linux/regulator/consumer.h>
 
 #include <sound/tlv320aic32x4.h>
 #include <sound/core.h>
@@ -44,6 +47,18 @@
 
 #include "tlv320aic32x4.h"
 
+#if defined(DEBUG)
+	#define DBGENTER	        { pr_devel ("<== %s()\n", __FUNCTION__); }
+	#define DBGEXIT      	    { pr_devel ("--> %s()\n", __FUNCTION__); }
+	#define DEV_DBGENTER(dev)  	{ dev_dbg  (dev, "<== %s()\n", __FUNCTION__); }
+	#define DEV_DBGEXIT(dev)    { dev_dbg  (dev, "--> %s()\n", __FUNCTION__); }
+#else
+	#define DBGENTER	{ }
+	#define DBGEXIT  	{ }
+	#define DEV_DBGENTER(dev)  	{ }
+	#define DEV_DBGEXIT(dev)    { }
+#endif
+
 struct aic32x4_rate_divs {
 	u32 mclk;
 	u32 rate;
@@ -66,20 +81,31 @@ struct aic32x4_priv {
 	u32 micpga_routing;
 	bool swapdacs;
 	int rstn_gpio;
+
+	struct regulator *supply_ldo;
+	struct regulator *supply_iov;
+	struct regulator *supply_dv;
+	struct regulator *supply_av;
 };
 
-/* 0dB min, 1dB steps */
-static DECLARE_TLV_DB_SCALE(tlv_step_1, 0, 100, 0);
 /* 0dB min, 0.5dB steps */
 static DECLARE_TLV_DB_SCALE(tlv_step_0_5, 0, 50, 0);
+/* -63.5dB min, 0.5dB steps */
+static DECLARE_TLV_DB_SCALE(tlv_pcm, -6350, 50, 0);
+/* -6dB min, 1dB steps */
+static DECLARE_TLV_DB_SCALE(tlv_driver_gain, -600, 100, 0);
+/* -12dB min, 0.5dB steps */
+static DECLARE_TLV_DB_SCALE(tlv_adc_vol, -1200, 50, 0);
 
 static const struct snd_kcontrol_new aic32x4_snd_controls[] = {
-	SOC_DOUBLE_R_TLV("PCM Playback Volume", AIC32X4_LDACVOL,
-			AIC32X4_RDACVOL, 0, 0x30, 0, tlv_step_0_5),
-	SOC_DOUBLE_R_TLV("HP Driver Gain Volume", AIC32X4_HPLGAIN,
-			AIC32X4_HPRGAIN, 0, 0x1D, 0, tlv_step_1),
-	SOC_DOUBLE_R_TLV("LO Driver Gain Volume", AIC32X4_LOLGAIN,
-			AIC32X4_LORGAIN, 0, 0x1D, 0, tlv_step_1),
+	SOC_DOUBLE_R_S_TLV("PCM Playback Volume", AIC32X4_LDACVOL,
+			AIC32X4_RDACVOL, 0, -0x7f, 0x30, 7, 0, tlv_pcm),
+	SOC_DOUBLE_R_S_TLV("HP Driver Gain Volume", AIC32X4_HPLGAIN,
+			AIC32X4_HPRGAIN, 0, -0x6, 0x1d, 5, 0,
+			tlv_driver_gain),
+	SOC_DOUBLE_R_S_TLV("LO Driver Gain Volume", AIC32X4_LOLGAIN,
+			AIC32X4_LORGAIN, 0, -0x6, 0x1d, 5, 0,
+			tlv_driver_gain),
 	SOC_DOUBLE_R("HP DAC Playback Switch", AIC32X4_HPLGAIN,
 			AIC32X4_HPRGAIN, 6, 0x01, 1),
 	SOC_DOUBLE_R("LO DAC Playback Switch", AIC32X4_LOLGAIN,
@@ -90,8 +116,8 @@ static const struct snd_kcontrol_new aic32x4_snd_controls[] = {
 	SOC_SINGLE("ADCFGA Left Mute Switch", AIC32X4_ADCFGA, 7, 1, 0),
 	SOC_SINGLE("ADCFGA Right Mute Switch", AIC32X4_ADCFGA, 3, 1, 0),
 
-	SOC_DOUBLE_R_TLV("ADC Level Volume", AIC32X4_LADCVOL,
-			AIC32X4_RADCVOL, 0, 0x28, 0, tlv_step_0_5),
+	SOC_DOUBLE_R_S_TLV("ADC Level Volume", AIC32X4_LADCVOL,
+			AIC32X4_RADCVOL, 0, -0x18, 0x28, 6, 0, tlv_adc_vol),
 	SOC_DOUBLE_R_TLV("PGA Level Volume", AIC32X4_LMICPGAVOL,
 			AIC32X4_RMICPGAVOL, 0, 0x5f, 0, tlv_step_0_5),
 
@@ -263,7 +289,7 @@ static const struct snd_soc_dapm_route aic32x4_dapm_routes[] = {
 
 static const struct regmap_range_cfg aic32x4_regmap_pages[] = {
 	{
-		.selector_reg = 0,
+		.selector_reg = AIC32X4_PSEL,
 		.selector_mask  = 0xff,
 		.window_start = 0,
 		.window_len = 128,
@@ -284,14 +310,23 @@ static const struct regmap_config aic32x4_regmap = {
 static inline int aic32x4_get_divs(int mclk, int rate)
 {
 	int i;
+	const struct aic32x4_rate_divs *div;
+	DBGENTER
 
 	for (i = 0; i < ARRAY_SIZE(aic32x4_divs); i++) {
 		if ((aic32x4_divs[i].rate == rate)
 		    && (aic32x4_divs[i].mclk == mclk)) {
+			div = &(aic32x4_divs[i]);
+			pr_devel ("  Divider[%d] mclk=%d rate=%d\n", i, mclk, rate);
+			pr_devel ("  MCLK=%d rate=%d BCLK_N=%d\n", div->mclk, div->rate, div->blck_N);
+			pr_devel ("  PLL P=%d J=%d D=%d\n", div->p_val, div->pll_j,	div->pll_d);
+			pr_devel ("  DAC NDAC=%d MDAC=%d DOSR=%d\n", div->ndac, div->mdac, div->dosr);
+			pr_devel ("  ADC NADC=%d MADC=%d AOSR=%d\n", div->nadc, div->madc, div->aosr);
 			return i;
 		}
 	}
 	printk(KERN_ERR "aic32x4: master clock and sample rate is not supported\n");
+	DBGEXIT
 	return -EINVAL;
 }
 
@@ -300,7 +335,8 @@ static int aic32x4_set_dai_sysclk(struct snd_soc_dai *codec_dai,
 {
 	struct snd_soc_codec *codec = codec_dai->codec;
 	struct aic32x4_priv *aic32x4 = snd_soc_codec_get_drvdata(codec);
-
+	DEV_DBGENTER(codec_dai->dev)
+	dev_dbg (codec_dai->dev, "%s freq=%d\n", __FUNCTION__, freq);
 	switch (freq) {
 	case AIC32X4_FREQ_12000000:
 	case AIC32X4_FREQ_24000000:
@@ -308,7 +344,8 @@ static int aic32x4_set_dai_sysclk(struct snd_soc_dai *codec_dai,
 		aic32x4->sysclk = freq;
 		return 0;
 	}
-	printk(KERN_ERR "aic32x4: invalid frequency to set DAI system clock\n");
+	dev_err (codec_dai->dev,"invalid frequency to set DAI system clock\n");
+	DEV_DBGEXIT(codec_dai->dev)
 	return -EINVAL;
 }
 
@@ -318,7 +355,8 @@ static int aic32x4_set_dai_fmt(struct snd_soc_dai *codec_dai, unsigned int fmt)
 	u8 iface_reg_1;
 	u8 iface_reg_2;
 	u8 iface_reg_3;
-
+	DEV_DBGENTER(codec_dai->dev)
+	dev_dbg (codec_dai->dev, "Format=0x%X\n", fmt);
 	iface_reg_1 = snd_soc_read(codec, AIC32X4_IFACE1);
 	iface_reg_1 = iface_reg_1 & ~(3 << 6 | 3 << 2);
 	iface_reg_2 = snd_soc_read(codec, AIC32X4_IFACE2);
@@ -329,43 +367,51 @@ static int aic32x4_set_dai_fmt(struct snd_soc_dai *codec_dai, unsigned int fmt)
 	/* set master/slave audio interface */
 	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
 	case SND_SOC_DAIFMT_CBM_CFM:
+		dev_dbg (codec_dai->dev, "codec is BCLK & WCLK master\n");
 		iface_reg_1 |= AIC32X4_BCLKMASTER | AIC32X4_WCLKMASTER;
 		break;
 	case SND_SOC_DAIFMT_CBS_CFS:
+		dev_dbg (codec_dai->dev, "codec is BCLK & WCLK slave\n");
 		break;
 	default:
-		printk(KERN_ERR "aic32x4: invalid DAI master/slave interface\n");
+		dev_err(codec_dai->dev,"invalid DAI master/slave interface\n");
 		return -EINVAL;
 	}
 
 	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
 	case SND_SOC_DAIFMT_I2S:
+		dev_dbg (codec_dai->dev, "mode: I2S\n");
 		break;
 	case SND_SOC_DAIFMT_DSP_A:
+		dev_dbg (codec_dai->dev, "mode: DSP_A\n");
 		iface_reg_1 |= (AIC32X4_DSP_MODE << AIC32X4_PLLJ_SHIFT);
 		iface_reg_3 |= (1 << 3); /* invert bit clock */
 		iface_reg_2 = 0x01; /* add offset 1 */
 		break;
 	case SND_SOC_DAIFMT_DSP_B:
+		dev_dbg (codec_dai->dev, "mode: DSP_B\n");
 		iface_reg_1 |= (AIC32X4_DSP_MODE << AIC32X4_PLLJ_SHIFT);
 		iface_reg_3 |= (1 << 3); /* invert bit clock */
 		break;
 	case SND_SOC_DAIFMT_RIGHT_J:
+		dev_dbg (codec_dai->dev, "mode: RIGHT_J\n");
 		iface_reg_1 |=
 			(AIC32X4_RIGHT_JUSTIFIED_MODE << AIC32X4_PLLJ_SHIFT);
 		break;
 	case SND_SOC_DAIFMT_LEFT_J:
+		dev_dbg (codec_dai->dev, "mode: LEFT_J\n");
 		iface_reg_1 |=
 			(AIC32X4_LEFT_JUSTIFIED_MODE << AIC32X4_PLLJ_SHIFT);
 		break;
 	default:
-		printk(KERN_ERR "aic32x4: invalid DAI interface format\n");
+		dev_err(codec_dai->dev, "invalid DAI interface format\n");
 		return -EINVAL;
 	}
 
 	snd_soc_write(codec, AIC32X4_IFACE1, iface_reg_1);
 	snd_soc_write(codec, AIC32X4_IFACE2, iface_reg_2);
 	snd_soc_write(codec, AIC32X4_IFACE3, iface_reg_3);
+	DEV_DBGEXIT(codec_dai->dev)
 	return 0;
 }
 
@@ -377,78 +423,71 @@ static int aic32x4_hw_params(struct snd_pcm_substream *substream,
 	struct aic32x4_priv *aic32x4 = snd_soc_codec_get_drvdata(codec);
 	u8 data;
 	int i;
-
+	DEV_DBGENTER(dai->dev)
 	i = aic32x4_get_divs(aic32x4->sysclk, params_rate(params));
 	if (i < 0) {
-		printk(KERN_ERR "aic32x4: sampling rate not supported\n");
+		dev_err(dai->dev, "aic32x4: sampling rate not supported\n");
 		return i;
 	}
 
 	/* Use PLL as CODEC_CLKIN and DAC_MOD_CLK as BDIV_CLKIN */
-	snd_soc_write(codec, AIC32X4_CLKMUX, AIC32X4_PLLCLKIN);
-	snd_soc_write(codec, AIC32X4_IFACE3, AIC32X4_DACMOD2BCLK);
+	snd_soc_update_bits(codec, AIC32X4_CLKMUX, AIC32X4_PLLCLKIN, AIC32X4_PLLCLKIN);
+	snd_soc_update_bits(codec, AIC32X4_IFACE3, AIC32X4_DACMOD2BCLK, AIC32X4_DACMOD2BCLK);
 
 	/* We will fix R value to 1 and will make P & J=K.D as varialble */
-	data = snd_soc_read(codec, AIC32X4_PLLPR);
-	data &= ~(7 << 4);
-	snd_soc_write(codec, AIC32X4_PLLPR,
-		      (data | (aic32x4_divs[i].p_val << 4) | 0x01));
+	/* preserve only PLL powered flag */
+	snd_soc_update_bits(codec, AIC32X4_PLLPR, AIC32X4_PLL_MASK, (aic32x4_divs[i].p_val << 4) | 0x01);
 
 	snd_soc_write(codec, AIC32X4_PLLJ, aic32x4_divs[i].pll_j);
 
 	snd_soc_write(codec, AIC32X4_PLLDMSB, (aic32x4_divs[i].pll_d >> 8));
-	snd_soc_write(codec, AIC32X4_PLLDLSB,
-		      (aic32x4_divs[i].pll_d & 0xff));
+	snd_soc_write(codec, AIC32X4_PLLDLSB, (aic32x4_divs[i].pll_d & 0xff));
 
 	/* NDAC divider value */
-	data = snd_soc_read(codec, AIC32X4_NDAC);
-	data &= ~(0x7f);
-	snd_soc_write(codec, AIC32X4_NDAC, data | aic32x4_divs[i].ndac);
+	snd_soc_update_bits(codec, AIC32X4_NDAC, AIC32X4_PLL_MASK, aic32x4_divs[i].ndac);
 
 	/* MDAC divider value */
-	data = snd_soc_read(codec, AIC32X4_MDAC);
-	data &= ~(0x7f);
-	snd_soc_write(codec, AIC32X4_MDAC, data | aic32x4_divs[i].mdac);
+	snd_soc_update_bits(codec, AIC32X4_MDAC, AIC32X4_PLL_MASK, aic32x4_divs[i].mdac);
 
 	/* DOSR MSB & LSB values */
 	snd_soc_write(codec, AIC32X4_DOSRMSB, aic32x4_divs[i].dosr >> 8);
-	snd_soc_write(codec, AIC32X4_DOSRLSB,
-		      (aic32x4_divs[i].dosr & 0xff));
+	snd_soc_write(codec, AIC32X4_DOSRLSB, (aic32x4_divs[i].dosr & 0xff));
 
 	/* NADC divider value */
-	data = snd_soc_read(codec, AIC32X4_NADC);
-	data &= ~(0x7f);
-	snd_soc_write(codec, AIC32X4_NADC, data | aic32x4_divs[i].nadc);
+	snd_soc_update_bits(codec, AIC32X4_NADC, AIC32X4_PLL_MASK, aic32x4_divs[i].nadc);
 
 	/* MADC divider value */
-	data = snd_soc_read(codec, AIC32X4_MADC);
-	data &= ~(0x7f);
-	snd_soc_write(codec, AIC32X4_MADC, data | aic32x4_divs[i].madc);
+	snd_soc_update_bits(codec, AIC32X4_MADC, AIC32X4_PLL_MASK, aic32x4_divs[i].madc);
 
 	/* AOSR value */
 	snd_soc_write(codec, AIC32X4_AOSR, aic32x4_divs[i].aosr);
 
 	/* BCLK N divider */
-	data = snd_soc_read(codec, AIC32X4_BCLKN);
-	data &= ~(0x7f);
-	snd_soc_write(codec, AIC32X4_BCLKN, data | aic32x4_divs[i].blck_N);
-
-	data = snd_soc_read(codec, AIC32X4_IFACE1);
-	data = data & ~(3 << 4);
+	snd_soc_update_bits(codec, AIC32X4_BCLKN, AIC32X4_PLL_MASK, aic32x4_divs[i].blck_N);
+	data = 0;
 	switch (params_format(params)) {
+	default:
+		dev_err(codec->dev, "%s: Unsupported format %d\n", __func__, params_format(params));
+		return -EINVAL;
+		break;
 	case SNDRV_PCM_FORMAT_S16_LE:
+		data = 0;
+		dev_dbg(codec->dev, "SNDRV_PCM_FORMAT_S16_LE\n");
 		break;
 	case SNDRV_PCM_FORMAT_S20_3LE:
-		data |= (AIC32X4_WORD_LEN_20BITS << AIC32X4_DOSRMSB_SHIFT);
+		data = (AIC32X4_WORD_LEN_20BITS << AIC32X4_DOSRMSB_SHIFT);
+		dev_dbg(codec->dev, "SNDRV_PCM_FORMAT_S20_3LE\n");
 		break;
 	case SNDRV_PCM_FORMAT_S24_LE:
-		data |= (AIC32X4_WORD_LEN_24BITS << AIC32X4_DOSRMSB_SHIFT);
+		data = (AIC32X4_WORD_LEN_24BITS << AIC32X4_DOSRMSB_SHIFT);
+		dev_dbg(codec->dev, "SNDRV_PCM_FORMAT_S24_LE\n");
 		break;
 	case SNDRV_PCM_FORMAT_S32_LE:
-		data |= (AIC32X4_WORD_LEN_32BITS << AIC32X4_DOSRMSB_SHIFT);
+		data = (AIC32X4_WORD_LEN_32BITS << AIC32X4_DOSRMSB_SHIFT);
+		dev_dbg(codec->dev, "SNDRV_PCM_FORMAT_S32_LE\n");
 		break;
 	}
-	snd_soc_write(codec, AIC32X4_IFACE1, data);
+	snd_soc_update_bits(codec, AIC32X4_IFACE1, AIC32X4_IFACE1_DATALEN_MASK ,data);
 
 	if (params_channels(params) == 1) {
 		data = AIC32X4_RDAC2LCHN | AIC32X4_LDAC2LCHN;
@@ -458,9 +497,8 @@ static int aic32x4_hw_params(struct snd_pcm_substream *substream,
 		else
 			data = AIC32X4_LDAC2LCHN | AIC32X4_RDAC2RCHN;
 	}
-	snd_soc_update_bits(codec, AIC32X4_DACSETUP, AIC32X4_DAC_CHAN_MASK,
-			data);
-
+	snd_soc_update_bits(codec, AIC32X4_DACSETUP, AIC32X4_DAC_CHAN_MASK, 	data);
+	DEV_DBGEXIT(dai->dev);
 	return 0;
 }
 
@@ -468,20 +506,23 @@ static int aic32x4_mute(struct snd_soc_dai *dai, int mute)
 {
 	struct snd_soc_codec *codec = dai->codec;
 	u8 dac_reg;
-
-	dac_reg = snd_soc_read(codec, AIC32X4_DACMUTE) & ~AIC32X4_MUTEON;
+	DEV_DBGENTER(codec->dev)
+	dev_dbg(codec->dev, "Mute=%d\n", mute);
 	if (mute)
-		snd_soc_write(codec, AIC32X4_DACMUTE, dac_reg | AIC32X4_MUTEON);
+		snd_soc_update_bits(codec, AIC32X4_DACMUTE, AIC32X4_MUTEON, AIC32X4_MUTEON);
 	else
-		snd_soc_write(codec, AIC32X4_DACMUTE, dac_reg);
+		snd_soc_update_bits(codec, AIC32X4_DACMUTE, AIC32X4_MUTEON, 0);
+	DEV_DBGEXIT(codec->dev)
 	return 0;
 }
 
 static int aic32x4_set_bias_level(struct snd_soc_codec *codec,
 				  enum snd_soc_bias_level level)
 {
+	DEV_DBGENTER(codec->dev)
 	switch (level) {
 	case SND_SOC_BIAS_ON:
+		dev_dbg(codec->dev,"SND_SOC_BIAS_ON");
 		/* Switch on PLL */
 		snd_soc_update_bits(codec, AIC32X4_PLLPR,
 				    AIC32X4_PLLEN, AIC32X4_PLLEN);
@@ -507,36 +548,34 @@ static int aic32x4_set_bias_level(struct snd_soc_codec *codec,
 				    AIC32X4_BCLKEN, AIC32X4_BCLKEN);
 		break;
 	case SND_SOC_BIAS_PREPARE:
+		dev_dbg(codec->dev,"SND_SOC_BIAS_ON");
 		break;
 	case SND_SOC_BIAS_STANDBY:
-		/* Switch off PLL */
-		snd_soc_update_bits(codec, AIC32X4_PLLPR,
-				    AIC32X4_PLLEN, 0);
-
-		/* Switch off NDAC Divider */
-		snd_soc_update_bits(codec, AIC32X4_NDAC,
-				    AIC32X4_NDACEN, 0);
+		dev_dbg(codec->dev,"SND_SOC_BIAS_ON");
+		/* Switch off BCLK_N Divider */
+		snd_soc_update_bits(codec, AIC32X4_BCLKN, AIC32X4_BCLKEN, 0);
 
-		/* Switch off MDAC Divider */
-		snd_soc_update_bits(codec, AIC32X4_MDAC,
-				    AIC32X4_MDACEN, 0);
+		/* Switch off MADC Divider */
+		snd_soc_update_bits(codec, AIC32X4_MADC,  AIC32X4_MADCEN, 0);
 
 		/* Switch off NADC Divider */
-		snd_soc_update_bits(codec, AIC32X4_NADC,
-				    AIC32X4_NADCEN, 0);
+		snd_soc_update_bits(codec, AIC32X4_NADC,  AIC32X4_NADCEN, 0);
 
-		/* Switch off MADC Divider */
-		snd_soc_update_bits(codec, AIC32X4_MADC,
-				    AIC32X4_MADCEN, 0);
+		/* Switch off MDAC Divider */
+		snd_soc_update_bits(codec, AIC32X4_MDAC,  AIC32X4_MDACEN, 0);
 
-		/* Switch off BCLK_N Divider */
-		snd_soc_update_bits(codec, AIC32X4_BCLKN,
-				    AIC32X4_BCLKEN, 0);
+		/* Switch off NDAC Divider */
+		snd_soc_update_bits(codec, AIC32X4_NDAC,  AIC32X4_NDACEN, 0);
+
+		/* Switch off PLL */
+		snd_soc_update_bits(codec, AIC32X4_PLLPR, AIC32X4_PLLEN, 0);
 		break;
 	case SND_SOC_BIAS_OFF:
+		dev_dbg(codec->dev,"SND_SOC_BIAS_ON");
 		break;
 	}
 	codec->dapm.bias_level = level;
+	DEV_DBGEXIT(codec->dev)
 	return 0;
 }
 
@@ -571,12 +610,14 @@ static struct snd_soc_dai_driver aic32x4_dai = {
 
 static int aic32x4_suspend(struct snd_soc_codec *codec)
 {
+	DEV_DBGENTER(codec->dev)
 	aic32x4_set_bias_level(codec, SND_SOC_BIAS_OFF);
 	return 0;
 }
 
 static int aic32x4_resume(struct snd_soc_codec *codec)
 {
+	DEV_DBGENTER(codec->dev)
 	aic32x4_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
 	return 0;
 }
@@ -585,10 +626,9 @@ static int aic32x4_probe(struct snd_soc_codec *codec)
 {
 	struct aic32x4_priv *aic32x4 = snd_soc_codec_get_drvdata(codec);
 	u32 tmp_reg;
-
+	DEV_DBGENTER(codec->dev)
 	snd_soc_codec_set_cache_io(codec, 8, 8, SND_SOC_REGMAP);
-
-	if (aic32x4->rstn_gpio >= 0) {
+	if (gpio_is_valid(aic32x4->rstn_gpio)) {
 		ndelay(10);
 		gpio_set_value(aic32x4->rstn_gpio, 1);
 	}
@@ -603,7 +643,6 @@ static int aic32x4_probe(struct snd_soc_codec *codec)
 	if (aic32x4->power_cfg & AIC32X4_PWR_AVDD_DVDD_WEAK_DISABLE) {
 		snd_soc_write(codec, AIC32X4_PWRCFG, AIC32X4_AVDDWEAKDISABLE);
 	}
-
 	tmp_reg = (aic32x4->power_cfg & AIC32X4_PWR_AIC32X4_LDO_ENABLE) ?
 			AIC32X4_LDOCTLEN : 0;
 	snd_soc_write(codec, AIC32X4_LDOCTL, tmp_reg);
@@ -626,6 +665,11 @@ static int aic32x4_probe(struct snd_soc_codec *codec)
 		snd_soc_write(codec, AIC32X4_RMICPGANIN, AIC32X4_RMICPGANIN_IN1L_10K);
 	else
 		snd_soc_write(codec, AIC32X4_RMICPGANIN, AIC32X4_RMICPGANIN_CM1R_10K);
+	if (aic32x4->micpga_routing & AIC32X4_MICPGA_ROUTE_NEG_CM1_10K) {
+		/* Configure negative leg of MicPGA to CM */
+		snd_soc_write(codec, AIC32X4_LMICPGANIN, AIC32X4_LMICPGANIN_CM1L_10K);
+		snd_soc_write(codec, AIC32X4_RMICPGANIN, AIC32X4_RMICPGANIN_CM1R_10K);
+	}
 
 	aic32x4_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
 
@@ -638,12 +682,13 @@ static int aic32x4_probe(struct snd_soc_codec *codec)
 	snd_soc_write(codec, AIC32X4_ADCSETUP, tmp_reg |
 				AIC32X4_LADC_EN | AIC32X4_RADC_EN);
 	snd_soc_write(codec, AIC32X4_ADCSETUP, tmp_reg);
-
+	DEV_DBGEXIT(codec->dev)
 	return 0;
 }
 
 static int aic32x4_remove(struct snd_soc_codec *codec)
 {
+	DEV_DBGENTER(codec->dev)
 	aic32x4_set_bias_level(codec, SND_SOC_BIAS_OFF);
 	return 0;
 }
@@ -663,13 +708,127 @@ static struct snd_soc_codec_driver soc_codec_dev_aic32x4 = {
 	.num_dapm_routes = ARRAY_SIZE(aic32x4_dapm_routes),
 };
 
+static int aic32x4_parse_dt(struct aic32x4_priv *aic32x4,
+		struct device_node *np)
+{
+	aic32x4->swapdacs = false;
+	aic32x4->micpga_routing = 0;
+	aic32x4->rstn_gpio = of_get_named_gpio(np, "reset-gpios", 0);
+	//GISBC & Chiliboard LCD:
+	aic32x4->micpga_routing = AIC32X4_MICPGA_ROUTE_NEG_CM1_10K;
+	aic32x4->power_cfg      = AIC32X4_PWR_AVDD_DVDD_WEAK_DISABLE;
+	aic32x4->power_cfg     |= AIC32X4_PWR_AIC32X4_LDO_ENABLE;
+	return 0;
+}
+
+static void aic32x4_disable_regulators(struct aic32x4_priv *aic32x4)
+{
+	regulator_disable(aic32x4->supply_iov);
+
+	if (!IS_ERR(aic32x4->supply_ldo))
+		regulator_disable(aic32x4->supply_ldo);
+
+	if (!IS_ERR(aic32x4->supply_dv))
+		regulator_disable(aic32x4->supply_dv);
+
+	if (!IS_ERR(aic32x4->supply_av))
+		regulator_disable(aic32x4->supply_av);
+}
+
+static int aic32x4_setup_regulators(struct device *dev,
+		struct aic32x4_priv *aic32x4)
+{
+	int ret = 0;
+
+	aic32x4->supply_ldo = devm_regulator_get_optional(dev, "ldoin");
+	aic32x4->supply_iov = devm_regulator_get(dev, "iov");
+	aic32x4->supply_dv = devm_regulator_get_optional(dev, "dv");
+	aic32x4->supply_av = devm_regulator_get_optional(dev, "av");
+
+	/* Check if the regulator requirements are fulfilled */
+
+	if (IS_ERR(aic32x4->supply_iov)) {
+		dev_err(dev, "Missing supply 'iov'\n");
+		return PTR_ERR(aic32x4->supply_iov);
+	}
+
+	if (IS_ERR(aic32x4->supply_ldo)) {
+		if (PTR_ERR(aic32x4->supply_ldo) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+
+		if (IS_ERR(aic32x4->supply_dv)) {
+			dev_err(dev, "Missing supply 'dv' or 'ldoin'\n");
+			return PTR_ERR(aic32x4->supply_dv);
+		}
+		if (IS_ERR(aic32x4->supply_av)) {
+			dev_err(dev, "Missing supply 'av' or 'ldoin'\n");
+			return PTR_ERR(aic32x4->supply_av);
+		}
+	} else {
+		if (IS_ERR(aic32x4->supply_dv) &&
+				PTR_ERR(aic32x4->supply_dv) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		if (IS_ERR(aic32x4->supply_av) &&
+				PTR_ERR(aic32x4->supply_av) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+	}
+
+	ret = regulator_enable(aic32x4->supply_iov);
+	if (ret) {
+		dev_err(dev, "Failed to enable regulator iov\n");
+		return ret;
+	}
+
+	if (!IS_ERR(aic32x4->supply_ldo)) {
+		ret = regulator_enable(aic32x4->supply_ldo);
+		if (ret) {
+			dev_err(dev, "Failed to enable regulator ldo\n");
+			goto error_ldo;
+		}
+	}
+
+	if (!IS_ERR(aic32x4->supply_dv)) {
+		ret = regulator_enable(aic32x4->supply_dv);
+		if (ret) {
+			dev_err(dev, "Failed to enable regulator dv\n");
+			goto error_dv;
+		}
+	}
+
+	if (!IS_ERR(aic32x4->supply_av)) {
+		ret = regulator_enable(aic32x4->supply_av);
+		if (ret) {
+			dev_err(dev, "Failed to enable regulator av\n");
+			goto error_av;
+		}
+	}
+
+	if (!IS_ERR(aic32x4->supply_ldo) && IS_ERR(aic32x4->supply_av))
+		aic32x4->power_cfg |= AIC32X4_PWR_AIC32X4_LDO_ENABLE;
+
+	return 0;
+
+error_av:
+	if (!IS_ERR(aic32x4->supply_dv))
+		regulator_disable(aic32x4->supply_dv);
+
+error_dv:
+	if (!IS_ERR(aic32x4->supply_ldo))
+		regulator_disable(aic32x4->supply_ldo);
+
+error_ldo:
+	regulator_disable(aic32x4->supply_iov);
+	return ret;
+}
+
 static int aic32x4_i2c_probe(struct i2c_client *i2c,
 			     const struct i2c_device_id *id)
 {
 	struct aic32x4_pdata *pdata = i2c->dev.platform_data;
 	struct aic32x4_priv *aic32x4;
+	struct device_node *np = i2c->dev.of_node;
 	int ret;
-
+	DEV_DBGENTER(&i2c->dev)
 	aic32x4 = devm_kzalloc(&i2c->dev, sizeof(struct aic32x4_priv),
 			       GFP_KERNEL);
 	if (aic32x4 == NULL)
@@ -686,6 +845,12 @@ static int aic32x4_i2c_probe(struct i2c_client *i2c,
 		aic32x4->swapdacs = pdata->swapdacs;
 		aic32x4->micpga_routing = pdata->micpga_routing;
 		aic32x4->rstn_gpio = pdata->rstn_gpio;
+	} else if (np) {
+		ret = aic32x4_parse_dt(aic32x4, np);
+		if (ret) {
+			dev_err(&i2c->dev, "Failed to parse DT node\n");
+			return ret;
+		}
 	} else {
 		aic32x4->power_cfg = 0;
 		aic32x4->swapdacs = false;
@@ -693,20 +858,38 @@ static int aic32x4_i2c_probe(struct i2c_client *i2c,
 		aic32x4->rstn_gpio = -1;
 	}
 
-	if (aic32x4->rstn_gpio >= 0) {
+	if (gpio_is_valid(aic32x4->rstn_gpio)) {
 		ret = devm_gpio_request_one(&i2c->dev, aic32x4->rstn_gpio,
 				GPIOF_OUT_INIT_LOW, "tlv320aic32x4 rstn");
 		if (ret != 0)
 			return ret;
 	}
 
+	ret = aic32x4_setup_regulators(&i2c->dev, aic32x4);
+	if (ret) {
+		dev_err(&i2c->dev, "Failed to setup regulators\n");
+		return ret;
+	}
+
 	ret = snd_soc_register_codec(&i2c->dev,
 			&soc_codec_dev_aic32x4, &aic32x4_dai, 1);
-	return ret;
+	if (ret) {
+		dev_err(&i2c->dev, "Failed to register codec\n");
+		aic32x4_disable_regulators(aic32x4);
+		return ret;
+	}
+
+	i2c_set_clientdata(i2c, aic32x4);
+
+	return 0;
 }
 
 static int aic32x4_i2c_remove(struct i2c_client *client)
 {
+	struct aic32x4_priv *aic32x4 = i2c_get_clientdata(client);
+
+	aic32x4_disable_regulators(aic32x4);
+
 	snd_soc_unregister_codec(&client->dev);
 	return 0;
 }
@@ -717,10 +900,17 @@ static const struct i2c_device_id aic32x4_i2c_id[] = {
 };
 MODULE_DEVICE_TABLE(i2c, aic32x4_i2c_id);
 
+static const struct of_device_id aic32x4_of_id[] = {
+	{ .compatible = "ti,tlv320aic32x4", },
+	{ /* senitel */ }
+};
+MODULE_DEVICE_TABLE(of, aic32x4_of_id);
+
 static struct i2c_driver aic32x4_i2c_driver = {
 	.driver = {
 		.name = "tlv320aic32x4",
 		.owner = THIS_MODULE,
+		.of_match_table = aic32x4_of_id,
 	},
 	.probe =    aic32x4_i2c_probe,
 	.remove =   aic32x4_i2c_remove,
diff --git a/sound/soc/codecs/tlv320aic32x4.h b/sound/soc/codecs/tlv320aic32x4.h
index 995f033..9817efb 100644
--- a/sound/soc/codecs/tlv320aic32x4.h
+++ b/sound/soc/codecs/tlv320aic32x4.h
@@ -118,10 +118,12 @@
 
 #define AIC32X4_MICBIAS_LDOIN		0x08
 #define AIC32X4_MICBIAS_2075V		0x60
+#define AIC32X4_MICBIAS_EN			(0x01 << 6)
 
 #define AIC32X4_LMICPGANIN_IN2R_10K	0x10
 #define AIC32X4_LMICPGANIN_CM1L_10K	0x40
 #define AIC32X4_RMICPGANIN_IN1L_10K	0x10
+#define AIC32X4_RMICPGANIN_CM1L_10K	0x40
 #define AIC32X4_RMICPGANIN_CM1R_10K	0x40
 
 #define AIC32X4_LMICPGAVOL_NOGAIN	0x80
@@ -130,6 +132,7 @@
 #define AIC32X4_BCLKMASTER		0x08
 #define AIC32X4_WCLKMASTER		0x04
 #define AIC32X4_PLLEN			(0x01 << 7)
+#define AIC32X4_PLL_MASK		0x7F
 #define AIC32X4_NDACEN			(0x01 << 7)
 #define AIC32X4_MDACEN			(0x01 << 7)
 #define AIC32X4_NADCEN			(0x01 << 7)
@@ -146,4 +149,7 @@
 #define AIC32X4_MUTEON			0x0C
 #define	AIC32X4_DACMOD2BCLK		0x01
 
+#define AIC32X4_DACMUTE_MASK			0x0C
+#define AIC32X4_IFACE1_DATALEN_MASK		0x30
+
 #endif				/* _TLV320AIC32X4_H */
-- 
2.1.4

